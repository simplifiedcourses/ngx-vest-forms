{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "FormDirectiveDemoComponent",
      "id": "component-FormDirectiveDemoComponent-b16fb1594732bbd254505886d953516e1dd831bd67d0b91a1fe99fa89e623ca7312b749d12d8da94aee0713736d5919136f7434ceb78eaca4706f0eb4f0e8b63",
      "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<form\n  class=\"p-4\"\n  scVestForm\n  (ngSubmit)=\"onSubmit()\"\n  [formValue]=\"formValue()\"\n  [validateRootForm]=\"true\"\n  [formShape]=\"shape\"\n  [validationConfig]=\"validationConfig\"\n  [suite]=\"suite\"\n  (validChange)=\"formValid.set($event)\"\n  (errorsChange)=\"errors.set($event)\"\n  (formValueChange)=\"setFormValue($event)\"\n>\n  <fieldset>\n    <div\n      class=\"w-full\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__first-name\"\n    >\n      <label>\n        <span>First name</span>\n        <input\n          placeholder=\"Type your first name\"\n          data-testid=\"input__first-name\"\n          type=\"text\"\n          [ngModel]=\"vm.formValue.firstName\"\n          name=\"firstName\"\n        />\n      </label>\n    </div>\n    <div\n      class=\"w-full\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__last-name\"\n    >\n      <label>\n        <span>Last name</span>\n        <input\n          placeholder=\"Type your last name\"\n          data-testid=\"input__last-name\"\n          type=\"text\"\n          [ngModel]=\"vm.formValue.lastName\"\n          name=\"lastName\"\n        />\n      </label>\n    </div>\n    <div\n      class=\"sm:col-span-2\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__passwords\"\n      ngModelGroup=\"passwords\"\n    >\n      <div class=\"grid gap-4 sm:grid-cols-2 sm:gap-6\">\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__password\"\n        >\n          <label>\n            <span>Password</span>\n            <input\n              placeholder=\"Type password\"\n              type=\"password\"\n              data-testid=\"input__password\"\n              [ngModel]=\"vm.formValue.passwords?.password\"\n              name=\"password\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__confirm-password\"\n        >\n          <label>\n            <span>Confirm</span>\n            <input\n              placeholder=\"Confirm password\"\n              type=\"password\"\n              data-testid=\"input__confirm-password\"\n              [ngModel]=\"vm.formValue.passwords?.confirmPassword\"\n              name=\"confirmPassword\"\n            />\n          </label>\n        </div>\n      </div>\n    </div>\n    <button\n      data-testid=\"btn__toggle-validation-config\"\n      (click)=\"toggle()\"\n      type=\"button\"\n    >\n      Toggle validation config\n    </button>\n    <button data-testid=\"btn__submit\" type=\"submit\">Submit</button>\n  </fieldset>\n</form>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "errors",
          "defaultValue": "signal<Record<string, string>>({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 120,
          "modifierKind": [124, 148]
        },
        {
          "name": "formValid",
          "defaultValue": "signal<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 119,
          "modifierKind": [124, 148]
        },
        {
          "name": "formValue",
          "defaultValue": "signal<FormModel>({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 118,
          "modifierKind": [124, 148]
        },
        {
          "name": "shape",
          "defaultValue": "formShape",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 121,
          "modifierKind": [124, 148]
        },
        {
          "name": "suite",
          "defaultValue": "formValidationSuite",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 122,
          "modifierKind": [124, 148]
        },
        {
          "name": "validationConfig",
          "defaultValue": "{\n    firstName: ['lastName'],\n    'passwords.password': ['passwords.confirmPassword'],\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 123,
          "modifierKind": [124]
        },
        {
          "name": "viewModel",
          "defaultValue": "computed(() => {\n    return {\n      formValue: this.formValue(),\n      errors: this.errors(),\n      formValid: this.formValid(),\n    };\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 127,
          "modifierKind": [123, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "setFormValue",
          "args": [
            {
              "name": "v",
              "type": "FormModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "v",
              "type": "FormModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "vestForms"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { componentWrapperDecorator, Meta, StoryObj } from '@storybook/angular';\nimport { Component, computed, signal } from '@angular/core';\nimport { vestForms } from '../exports';\nimport { getByText, userEvent, waitFor, within } from '@storybook/test';\nimport { expect } from '@storybook/jest';\nimport {\n  FormModel,\n  formShape,\n  formValidationSuite,\n  selectors,\n} from './simple-form';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  template: `\n    <form\n      class=\"p-4\"\n      scVestForm\n      (ngSubmit)=\"onSubmit()\"\n      [formValue]=\"formValue()\"\n      [validateRootForm]=\"true\"\n      [formShape]=\"shape\"\n      [validationConfig]=\"validationConfig\"\n      [suite]=\"suite\"\n      (validChange)=\"formValid.set($event)\"\n      (errorsChange)=\"errors.set($event)\"\n      (formValueChange)=\"setFormValue($event)\"\n    >\n      <fieldset>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__first-name\"\n        >\n          <label>\n            <span>First name</span>\n            <input\n              placeholder=\"Type your first name\"\n              data-testid=\"input__first-name\"\n              type=\"text\"\n              [ngModel]=\"vm.formValue.firstName\"\n              name=\"firstName\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__last-name\"\n        >\n          <label>\n            <span>Last name</span>\n            <input\n              placeholder=\"Type your last name\"\n              data-testid=\"input__last-name\"\n              type=\"text\"\n              [ngModel]=\"vm.formValue.lastName\"\n              name=\"lastName\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"sm:col-span-2\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__passwords\"\n          ngModelGroup=\"passwords\"\n        >\n          <div class=\"grid gap-4 sm:grid-cols-2 sm:gap-6\">\n            <div\n              class=\"w-full\"\n              sc-control-wrapper\n              data-testid=\"sc-control-wrapper__password\"\n            >\n              <label>\n                <span>Password</span>\n                <input\n                  placeholder=\"Type password\"\n                  type=\"password\"\n                  data-testid=\"input__password\"\n                  [ngModel]=\"vm.formValue.passwords?.password\"\n                  name=\"password\"\n                />\n              </label>\n            </div>\n            <div\n              class=\"w-full\"\n              sc-control-wrapper\n              data-testid=\"sc-control-wrapper__confirm-password\"\n            >\n              <label>\n                <span>Confirm</span>\n                <input\n                  placeholder=\"Confirm password\"\n                  type=\"password\"\n                  data-testid=\"input__confirm-password\"\n                  [ngModel]=\"vm.formValue.passwords?.confirmPassword\"\n                  name=\"confirmPassword\"\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n        <button\n          data-testid=\"btn__toggle-validation-config\"\n          (click)=\"toggle()\"\n          type=\"button\"\n        >\n          Toggle validation config\n        </button>\n        <button data-testid=\"btn__submit\" type=\"submit\">Submit</button>\n      </fieldset>\n    </form>\n  `,\n  imports: [vestForms, JsonPipe],\n  standalone: true,\n})\nexport class FormDirectiveDemoComponent {\n  protected readonly formValue = signal<FormModel>({});\n  protected readonly formValid = signal<boolean>(false);\n  protected readonly errors = signal<Record<string, string>>({});\n  protected readonly shape = formShape;\n  protected readonly suite = formValidationSuite;\n  protected validationConfig: any = {\n    firstName: ['lastName'],\n    'passwords.password': ['passwords.confirmPassword'],\n  };\n  private readonly viewModel = computed(() => {\n    return {\n      formValue: this.formValue(),\n      errors: this.errors(),\n      formValid: this.formValid(),\n    };\n  });\n\n  protected toggle(): void {\n    if (this.validationConfig['passwords.password']) {\n      this.validationConfig = { firstName: ['lastName'] };\n    } else {\n      this.validationConfig = {\n        firstName: ['lastName'],\n        'passwords.password': ['passwords.confirmPassword'],\n      };\n    }\n  }\n\n  protected get vm() {\n    return this.viewModel();\n  }\n\n  protected setFormValue(v: FormModel): void {\n    this.formValue.set(v);\n  }\n\n  protected onSubmit(): void {\n    if (this.formValid()) {\n      console.log(this.formValue());\n    }\n  }\n}\n\nconst meta: Meta<FormDirectiveDemoComponent> = {\n  title: 'simple form with validation config',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\nexport const Primary: StoryObj = {\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n};\n\nexport const ShouldRetriggerByValidationConfig: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n  },\n};\n\nexport const ShouldReactToDynamicValidationConfig: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.click(\n      canvas.getByTestId(selectors.btnToggleValidationConfig)\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await userEvent.click(\n      canvas.getByTestId(selectors.btnToggleValidationConfig)\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n  },\n};\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "vm": {
          "name": "vm",
          "getSignature": {
            "name": "vm",
            "type": "",
            "returnType": "",
            "line": 146
          }
        }
      }
    },
    {
      "name": "FormDirectiveDemoComponent",
      "id": "component-FormDirectiveDemoComponent-9b8351448201162c276fbc477f3237182784f34ca07b86e812ac9b415e5d2b31abf143fd719a40ee379a7e4873bafcbedc99e0493b1d390d3caa4bdad2340158-1",
      "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<form\n  class=\"p-4\"\n  scVestForm\n  (ngSubmit)=\"onSubmit()\"\n  [formValue]=\"formValue()\"\n  [validateRootForm]=\"true\"\n  [formShape]=\"shape\"\n  [suite]=\"suite\"\n  (validChange)=\"formValid.set($event)\"\n  (errorsChange)=\"errors.set($event)\"\n  (formValueChange)=\"setFormValue($event)\"\n  [validationOptions]=\"{ debounceTime: 500 }\"\n>\n  <fieldset>\n    <div\n      class=\"w-full\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__first-name\"\n    >\n      <label>\n        <span>First name</span>\n        <input\n          placeholder=\"Type your first name\"\n          data-testid=\"input__first-name\"\n          type=\"text\"\n          [ngModel]=\"vm.formValue.firstName\"\n          name=\"firstName\"\n          [validationOptions]=\"{ debounceTime: 500 }\"\n        />\n      </label>\n    </div>\n    <div\n      class=\"w-full\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__last-name\"\n    >\n      <label>\n        <span>Last name</span>\n        <input\n          placeholder=\"Type your last name\"\n          data-testid=\"input__last-name\"\n          type=\"text\"\n          [ngModel]=\"vm.formValue.lastName\"\n          name=\"lastName\"\n        />\n      </label>\n    </div>\n    <div\n      class=\"sm:col-span-2\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__passwords\"\n      ngModelGroup=\"passwords\"\n      [validationOptions]=\"{ debounceTime: 900 }\"\n    >\n      <div class=\"grid gap-4 sm:grid-cols-2 sm:gap-6\">\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__password\"\n        >\n          <label>\n            <span>Password</span>\n            <input\n              placeholder=\"Type password\"\n              type=\"password\"\n              data-testid=\"input__password\"\n              [ngModel]=\"vm.formValue.passwords?.password\"\n              name=\"password\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__confirm-password\"\n        >\n          <label>\n            <span>Confirm</span>\n            <input\n              placeholder=\"Confirm password\"\n              type=\"password\"\n              data-testid=\"input__confirm-password\"\n              [ngModel]=\"vm.formValue.passwords?.confirmPassword\"\n              name=\"confirmPassword\"\n            />\n          </label>\n        </div>\n      </div>\n    </div>\n    <button data-testid=\"btn__submit\" type=\"submit\">Submit</button>\n  </fieldset>\n  <pre data-testId=\"pre__form-errors\">\n    {{ vm.errors | json }}\n  </pre>\n</form>\n\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "errors",
          "defaultValue": "signal<Record<string, string>>({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 119,
          "modifierKind": [124, 148]
        },
        {
          "name": "formValid",
          "defaultValue": "signal<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 118,
          "modifierKind": [124, 148]
        },
        {
          "name": "formValue",
          "defaultValue": "signal<FormModel>({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 117,
          "modifierKind": [124, 148]
        },
        {
          "name": "shape",
          "defaultValue": "formShape",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 120,
          "modifierKind": [124, 148]
        },
        {
          "name": "suite",
          "defaultValue": "formValidationSuite",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 121,
          "modifierKind": [124, 148]
        },
        {
          "name": "viewModel",
          "defaultValue": "computed(() => {\n    return {\n      formValue: this.formValue(),\n      errors: this.errors(),\n      formValid: this.formValid(),\n    };\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 122,
          "modifierKind": [123, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "setFormValue",
          "args": [
            {
              "name": "v",
              "type": "FormModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "v",
              "type": "FormModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "vestForms"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { componentWrapperDecorator, Meta, StoryObj } from '@storybook/angular';\nimport { Component, computed, signal } from '@angular/core';\nimport { vestForms } from '../exports';\nimport { getByText, userEvent, waitFor, within } from '@storybook/test';\nimport { expect } from '@storybook/jest';\nimport {\n  FormModel,\n  formShape,\n  formValidationSuite,\n  selectors,\n} from './simple-form';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  template: `\n    <form\n      class=\"p-4\"\n      scVestForm\n      (ngSubmit)=\"onSubmit()\"\n      [formValue]=\"formValue()\"\n      [validateRootForm]=\"true\"\n      [formShape]=\"shape\"\n      [suite]=\"suite\"\n      (validChange)=\"formValid.set($event)\"\n      (errorsChange)=\"errors.set($event)\"\n      (formValueChange)=\"setFormValue($event)\"\n      [validationOptions]=\"{ debounceTime: 500 }\"\n    >\n      <fieldset>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__first-name\"\n        >\n          <label>\n            <span>First name</span>\n            <input\n              placeholder=\"Type your first name\"\n              data-testid=\"input__first-name\"\n              type=\"text\"\n              [ngModel]=\"vm.formValue.firstName\"\n              name=\"firstName\"\n              [validationOptions]=\"{ debounceTime: 500 }\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__last-name\"\n        >\n          <label>\n            <span>Last name</span>\n            <input\n              placeholder=\"Type your last name\"\n              data-testid=\"input__last-name\"\n              type=\"text\"\n              [ngModel]=\"vm.formValue.lastName\"\n              name=\"lastName\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"sm:col-span-2\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__passwords\"\n          ngModelGroup=\"passwords\"\n          [validationOptions]=\"{ debounceTime: 900 }\"\n        >\n          <div class=\"grid gap-4 sm:grid-cols-2 sm:gap-6\">\n            <div\n              class=\"w-full\"\n              sc-control-wrapper\n              data-testid=\"sc-control-wrapper__password\"\n            >\n              <label>\n                <span>Password</span>\n                <input\n                  placeholder=\"Type password\"\n                  type=\"password\"\n                  data-testid=\"input__password\"\n                  [ngModel]=\"vm.formValue.passwords?.password\"\n                  name=\"password\"\n                />\n              </label>\n            </div>\n            <div\n              class=\"w-full\"\n              sc-control-wrapper\n              data-testid=\"sc-control-wrapper__confirm-password\"\n            >\n              <label>\n                <span>Confirm</span>\n                <input\n                  placeholder=\"Confirm password\"\n                  type=\"password\"\n                  data-testid=\"input__confirm-password\"\n                  [ngModel]=\"vm.formValue.passwords?.confirmPassword\"\n                  name=\"confirmPassword\"\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n        <button data-testid=\"btn__submit\" type=\"submit\">Submit</button>\n      </fieldset>\n      <pre data-testId=\"pre__form-errors\">\n        {{ vm.errors | json }}\n      </pre>\n    </form>\n\n  `,\n  imports: [vestForms, JsonPipe],\n  standalone: true,\n})\nexport class FormDirectiveDemoComponent {\n  protected readonly formValue = signal<FormModel>({});\n  protected readonly formValid = signal<boolean>(false);\n  protected readonly errors = signal<Record<string, string>>({});\n  protected readonly shape = formShape;\n  protected readonly suite = formValidationSuite;\n  private readonly viewModel = computed(() => {\n    return {\n      formValue: this.formValue(),\n      errors: this.errors(),\n      formValid: this.formValid(),\n    };\n  });\n\n  protected get vm() {\n    return this.viewModel();\n  }\n\n  protected setFormValue(v: FormModel): void {\n    this.formValue.set(v);\n  }\n\n  protected onSubmit(): void {\n    if (this.formValid()) {\n      console.log(this.formValue());\n    }\n  }\n}\n\nconst meta: Meta<FormDirectiveDemoComponent> = {\n  title: 'simple form with validation options',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\nexport const Primary: StoryObj = {\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n};\n\nexport const ShouldShowFirstnameRequiredAfterDelayForNgModel: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.inputFirstName));\n    canvas.getByTestId(selectors.inputFirstName).blur();\n\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).not.toHaveTextContent('First name is required');\n\n    setTimeout(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperFirstName)\n      ).toHaveTextContent('First name is required');\n    }, 550)\n  },\n};\n\nexport const ShouldShowPasswordConfirmationAfterDelayForNgModelGroup: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'first');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'second'\n    , { delay: 500});\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).not.toHaveTextContent('Passwords do not match');\n\n    setTimeout(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperPasswords)\n      ).toHaveTextContent('Passwords do not match');\n    }, 1000)\n  },\n};\n\n\nexport const ShouldValidateOnRootFormAfterDelay: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputFirstName),\n      'Brecht'\n    );\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputLastName),\n      'Billiet'\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '1234');\n\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify({}))\n\n    const expectedErrors = {\n      rootForm: ['Brecht his pass is not 1234'],\n    };\n\n    setTimeout(() => {\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    }, 550)\n  },\n};\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "vm": {
          "name": "vm",
          "getSignature": {
            "name": "vm",
            "type": "",
            "returnType": "",
            "line": 130
          }
        }
      },
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "FormDirectiveDemoComponent-1"
    },
    {
      "name": "FormDirectiveDemoComponent",
      "id": "component-FormDirectiveDemoComponent-58eca0b64ef9bb0c2272137c0f04b8d830b142cd8b0c7a4ca692db235afc77339703770ab02be2d3243851e9fecdaff81a8374c772788e7c19755da03a0c16e0-2",
      "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<form\n  class=\"p-4\"\n  scVestForm\n  (ngSubmit)=\"onSubmit()\"\n  [formValue]=\"formValue()\"\n  [validateRootForm]=\"true\"\n  [formShape]=\"shape\"\n  [suite]=\"suite\"\n  (dirtyChange)=\"formDirty.set($event)\"\n  (validChange)=\"formValid.set($event)\"\n  (errorsChange)=\"errors.set($event)\"\n  (formValueChange)=\"setFormValue($event)\"\n>\n  <fieldset>\n    <div\n      class=\"w-full\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__first-name\"\n    >\n      <label>\n        <span>First name</span>\n        <input\n          placeholder=\"Type your first name\"\n          data-testid=\"input__first-name\"\n          type=\"text\"\n          [ngModel]=\"vm.formValue.firstName\"\n          name=\"firstName\"\n        />\n      </label>\n    </div>\n    <div\n      class=\"w-full\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__last-name\"\n    >\n      <label>\n        <span>Last name</span>\n        <input\n          placeholder=\"Type your last name\"\n          data-testid=\"input__last-name\"\n          type=\"text\"\n          [ngModel]=\"vm.formValue.lastName\"\n          name=\"lastName\"\n        />\n      </label>\n    </div>\n    <div\n      class=\"sm:col-span-2\"\n      sc-control-wrapper\n      data-testid=\"sc-control-wrapper__passwords\"\n      ngModelGroup=\"passwords\"\n    >\n      <div class=\"grid gap-4 sm:grid-cols-2 sm:gap-6\">\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__password\"\n        >\n          <label>\n            <span>Password</span>\n            <input\n              placeholder=\"Type password\"\n              type=\"password\"\n              data-testid=\"input__password\"\n              [ngModel]=\"vm.formValue.passwords?.password\"\n              name=\"password\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__confirm-password\"\n        >\n          <label>\n            <span>Confirm</span>\n            <input\n              placeholder=\"Confirm password\"\n              type=\"password\"\n              data-testid=\"input__confirm-password\"\n              [ngModel]=\"vm.formValue.passwords?.confirmPassword\"\n              name=\"confirmPassword\"\n            />\n          </label>\n        </div>\n      </div>\n    </div>\n    <button data-testid=\"btn__submit\" type=\"submit\">Submit</button>\n  </fieldset>\n  <pre data-testId=\"pre__form-value\">\n    {{ vm.formValue | json }}\n  </pre\n  >\n  <pre data-testId=\"pre__form-errors\">\n    {{ vm.errors | json }}\n  </pre\n  >\n  <pre data-testId=\"pre__form-valid\">{{ vm.formValid }}</pre>\n  <pre data-testId=\"pre__form-dirty\">{{ vm.formDirty }}</pre>\n</form>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "errors",
          "defaultValue": "signal<Record<string, string>>({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 124,
          "modifierKind": [124, 148]
        },
        {
          "name": "formDirty",
          "defaultValue": "signal<boolean | null>(null)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 123,
          "modifierKind": [124, 148]
        },
        {
          "name": "formValid",
          "defaultValue": "signal<boolean | null>(null)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 122,
          "modifierKind": [124, 148]
        },
        {
          "name": "formValue",
          "defaultValue": "signal<FormModel>({})",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 121,
          "modifierKind": [124, 148]
        },
        {
          "name": "shape",
          "defaultValue": "formShape",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 125,
          "modifierKind": [124, 148]
        },
        {
          "name": "suite",
          "defaultValue": "formValidationSuite",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 126,
          "modifierKind": [124, 148]
        },
        {
          "name": "viewModel",
          "defaultValue": "computed(() => {\n    return {\n      formValue: this.formValue(),\n      errors: this.errors(),\n      formValid: this.formValid(),\n      formDirty: this.formDirty(),\n    };\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 127,
          "modifierKind": [123, 148]
        }
      ],
      "methodsClass": [
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124]
        },
        {
          "name": "setFormValue",
          "args": [
            {
              "name": "v",
              "type": "FormModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [124],
          "jsdoctags": [
            {
              "name": "v",
              "type": "FormModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "vestForms"
        },
        {
          "name": "JsonPipe",
          "type": "pipe"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { componentWrapperDecorator, Meta, StoryObj } from '@storybook/angular';\nimport { Component, computed, signal } from '@angular/core';\nimport { vestForms } from '../exports';\nimport { userEvent, waitFor, within } from '@storybook/test';\nimport { expect } from '@storybook/jest';\nimport {\n  FormModel,\n  formShape,\n  formValidationSuite,\n  selectors,\n} from './simple-form';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  template: `\n    <form\n      class=\"p-4\"\n      scVestForm\n      (ngSubmit)=\"onSubmit()\"\n      [formValue]=\"formValue()\"\n      [validateRootForm]=\"true\"\n      [formShape]=\"shape\"\n      [suite]=\"suite\"\n      (dirtyChange)=\"formDirty.set($event)\"\n      (validChange)=\"formValid.set($event)\"\n      (errorsChange)=\"errors.set($event)\"\n      (formValueChange)=\"setFormValue($event)\"\n    >\n      <fieldset>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__first-name\"\n        >\n          <label>\n            <span>First name</span>\n            <input\n              placeholder=\"Type your first name\"\n              data-testid=\"input__first-name\"\n              type=\"text\"\n              [ngModel]=\"vm.formValue.firstName\"\n              name=\"firstName\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"w-full\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__last-name\"\n        >\n          <label>\n            <span>Last name</span>\n            <input\n              placeholder=\"Type your last name\"\n              data-testid=\"input__last-name\"\n              type=\"text\"\n              [ngModel]=\"vm.formValue.lastName\"\n              name=\"lastName\"\n            />\n          </label>\n        </div>\n        <div\n          class=\"sm:col-span-2\"\n          sc-control-wrapper\n          data-testid=\"sc-control-wrapper__passwords\"\n          ngModelGroup=\"passwords\"\n        >\n          <div class=\"grid gap-4 sm:grid-cols-2 sm:gap-6\">\n            <div\n              class=\"w-full\"\n              sc-control-wrapper\n              data-testid=\"sc-control-wrapper__password\"\n            >\n              <label>\n                <span>Password</span>\n                <input\n                  placeholder=\"Type password\"\n                  type=\"password\"\n                  data-testid=\"input__password\"\n                  [ngModel]=\"vm.formValue.passwords?.password\"\n                  name=\"password\"\n                />\n              </label>\n            </div>\n            <div\n              class=\"w-full\"\n              sc-control-wrapper\n              data-testid=\"sc-control-wrapper__confirm-password\"\n            >\n              <label>\n                <span>Confirm</span>\n                <input\n                  placeholder=\"Confirm password\"\n                  type=\"password\"\n                  data-testid=\"input__confirm-password\"\n                  [ngModel]=\"vm.formValue.passwords?.confirmPassword\"\n                  name=\"confirmPassword\"\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n        <button data-testid=\"btn__submit\" type=\"submit\">Submit</button>\n      </fieldset>\n      <pre data-testId=\"pre__form-value\">\n        {{ vm.formValue | json }}\n      </pre\n      >\n      <pre data-testId=\"pre__form-errors\">\n        {{ vm.errors | json }}\n      </pre\n      >\n      <pre data-testId=\"pre__form-valid\">{{ vm.formValid }}</pre>\n      <pre data-testId=\"pre__form-dirty\">{{ vm.formDirty }}</pre>\n    </form>\n  `,\n  imports: [vestForms, JsonPipe],\n  standalone: true,\n})\nexport class FormDirectiveDemoComponent {\n  protected readonly formValue = signal<FormModel>({});\n  protected readonly formValid = signal<boolean | null>(null);\n  protected readonly formDirty = signal<boolean | null>(null);\n  protected readonly errors = signal<Record<string, string>>({});\n  protected readonly shape = formShape;\n  protected readonly suite = formValidationSuite;\n  private readonly viewModel = computed(() => {\n    return {\n      formValue: this.formValue(),\n      errors: this.errors(),\n      formValid: this.formValid(),\n      formDirty: this.formDirty(),\n    };\n  });\n\n  protected get vm() {\n    return this.viewModel();\n  }\n\n  protected setFormValue(v: FormModel): void {\n    this.formValue.set(v);\n  }\n\n  protected onSubmit(): void {\n    if (this.formValid()) {\n      console.log(this.formValue());\n    }\n  }\n}\n\nconst meta: Meta<FormDirectiveDemoComponent> = {\n  title: 'simple form',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n};\n\nexport default meta;\n\nexport const Primary: StoryObj = {\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n};\n\nexport const ShouldShowErrorsOnSubmit: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n  },\n};\n\nexport const ShouldHideErrorsWhenValid: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n\n    await userEvent.type(canvas.getByTestId(selectors.inputFirstName), 'first');\n    await userEvent.type(canvas.getByTestId(selectors.inputLastName), 'last');\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'pass');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).not.toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).not.toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).not.toHaveTextContent('Password is required');\n  },\n};\nexport const ShouldShowErrorsOnBlur: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.inputFirstName));\n    canvas.getByTestId(selectors.inputFirstName).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n\n    await userEvent.click(canvas.getByTestId(selectors.inputLastName));\n    canvas.getByTestId(selectors.inputLastName).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n\n    await userEvent.click(canvas.getByTestId(selectors.inputPassword));\n    canvas.getByTestId(selectors.inputPassword).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n  },\n};\n\nexport const ShouldValidateOnGroups: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'first');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'second'\n    );\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).toHaveTextContent('Passwords do not match');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).toHaveClass('sc-control-wrapper--invalid');\n  },\n};\n\nexport const ShouldHaveCorrectStatussesAndFormValueInitially: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'false'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'false'\n      );\n      const expectedContent = {\n        passwords: {\n          password: null,\n          confirmPassword: null,\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      const expectedErrors = {\n        firstName: ['First name is required'],\n        lastName: ['Last name is required'],\n        'passwords.password': ['Password is required'],\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    });\n  },\n};\n\nexport const ShouldHaveCorrectStatussesAndOnFormUpdate: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputFirstName), 'f');\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'false'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'true'\n      );\n      const expectedContent = {\n        firstName: 'f',\n        passwords: {\n          password: null,\n          confirmPassword: null,\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      const expectedErrors = {\n        lastName: ['Last name is required'],\n        'passwords.password': ['Password is required'],\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    });\n    await userEvent.type(canvas.getByTestId(selectors.inputLastName), 'l');\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'p');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'p'\n    );\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'true'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'true'\n      );\n      const expectedContent = {\n        firstName: 'f',\n        lastName: 'l',\n        passwords: {\n          password: 'p',\n          confirmPassword: 'p',\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify({}));\n    });\n  },\n};\n\nexport const ShouldValidateOnRootForm: StoryObj = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputFirstName),\n      'Brecht'\n    );\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputLastName),\n      'Billiet'\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '1234');\n    const expectedErrors = {\n      rootForm: ['Brecht his pass is not 1234'],\n    };\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify(expectedErrors));\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '5');\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify({}));\n  },\n};\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "vm": {
          "name": "vm",
          "getSignature": {
            "name": "vm",
            "type": "",
            "returnType": "",
            "line": 136
          }
        }
      },
      "isDuplicate": true,
      "duplicateId": 2,
      "duplicateName": "FormDirectiveDemoComponent-2"
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<FormDirectiveDemoComponent>",
        "defaultValue": "{\n  title: 'simple form with validation config',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<FormDirectiveDemoComponent>",
        "defaultValue": "{\n  title: 'simple form with validation options',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta<FormDirectiveDemoComponent>",
        "defaultValue": "{\n  title: 'simple form',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n}"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n}"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n}"
      },
      {
        "name": "ShouldHaveCorrectStatussesAndFormValueInitially",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'false'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'false'\n      );\n      const expectedContent = {\n        passwords: {\n          password: null,\n          confirmPassword: null,\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      const expectedErrors = {\n        firstName: ['First name is required'],\n        lastName: ['Last name is required'],\n        'passwords.password': ['Password is required'],\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    });\n  },\n}"
      },
      {
        "name": "ShouldHaveCorrectStatussesAndOnFormUpdate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputFirstName), 'f');\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'false'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'true'\n      );\n      const expectedContent = {\n        firstName: 'f',\n        passwords: {\n          password: null,\n          confirmPassword: null,\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      const expectedErrors = {\n        lastName: ['Last name is required'],\n        'passwords.password': ['Password is required'],\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    });\n    await userEvent.type(canvas.getByTestId(selectors.inputLastName), 'l');\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'p');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'p'\n    );\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'true'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'true'\n      );\n      const expectedContent = {\n        firstName: 'f',\n        lastName: 'l',\n        passwords: {\n          password: 'p',\n          confirmPassword: 'p',\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify({}));\n    });\n  },\n}"
      },
      {
        "name": "ShouldHideErrorsWhenValid",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n\n    await userEvent.type(canvas.getByTestId(selectors.inputFirstName), 'first');\n    await userEvent.type(canvas.getByTestId(selectors.inputLastName), 'last');\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'pass');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).not.toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).not.toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).not.toHaveTextContent('Password is required');\n  },\n}"
      },
      {
        "name": "ShouldReactToDynamicValidationConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.click(\n      canvas.getByTestId(selectors.btnToggleValidationConfig)\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await userEvent.click(\n      canvas.getByTestId(selectors.btnToggleValidationConfig)\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n  },\n}"
      },
      {
        "name": "ShouldRetriggerByValidationConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n  },\n}"
      },
      {
        "name": "ShouldShowErrorsOnBlur",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.inputFirstName));\n    canvas.getByTestId(selectors.inputFirstName).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n\n    await userEvent.click(canvas.getByTestId(selectors.inputLastName));\n    canvas.getByTestId(selectors.inputLastName).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n\n    await userEvent.click(canvas.getByTestId(selectors.inputPassword));\n    canvas.getByTestId(selectors.inputPassword).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n  },\n}"
      },
      {
        "name": "ShouldShowErrorsOnSubmit",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n  },\n}"
      },
      {
        "name": "ShouldShowFirstnameRequiredAfterDelayForNgModel",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.inputFirstName));\n    canvas.getByTestId(selectors.inputFirstName).blur();\n\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).not.toHaveTextContent('First name is required');\n\n    setTimeout(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperFirstName)\n      ).toHaveTextContent('First name is required');\n    }, 550)\n  },\n}"
      },
      {
        "name": "ShouldShowPasswordConfirmationAfterDelayForNgModelGroup",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'first');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'second'\n    , { delay: 500});\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).not.toHaveTextContent('Passwords do not match');\n\n    setTimeout(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperPasswords)\n      ).toHaveTextContent('Passwords do not match');\n    }, 1000)\n  },\n}"
      },
      {
        "name": "ShouldValidateOnGroups",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'first');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'second'\n    );\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).toHaveTextContent('Passwords do not match');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).toHaveClass('sc-control-wrapper--invalid');\n  },\n}"
      },
      {
        "name": "ShouldValidateOnRootForm",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputFirstName),\n      'Brecht'\n    );\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputLastName),\n      'Billiet'\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '1234');\n    const expectedErrors = {\n      rootForm: ['Brecht his pass is not 1234'],\n    };\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify(expectedErrors));\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '5');\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify({}));\n  },\n}"
      },
      {
        "name": "ShouldValidateOnRootFormAfterDelay",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "StoryObj",
        "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputFirstName),\n      'Brecht'\n    );\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputLastName),\n      'Billiet'\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '1234');\n\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify({}))\n\n    const expectedErrors = {\n      rootForm: ['Brecht his pass is not 1234'],\n    };\n\n    setTimeout(() => {\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    }, 550)\n  },\n}"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts": [
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<FormDirectiveDemoComponent>",
          "defaultValue": "{\n  title: 'simple form with validation config',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n}"
        },
        {
          "name": "ShouldReactToDynamicValidationConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.click(\n      canvas.getByTestId(selectors.btnToggleValidationConfig)\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await userEvent.click(\n      canvas.getByTestId(selectors.btnToggleValidationConfig)\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n  },\n}"
        },
        {
          "name": "ShouldRetriggerByValidationConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'f');\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).toHaveTextContent('Confirm password is required');\n    });\n    await userEvent.clear(canvas.getByTestId(selectors.inputPassword));\n    await waitFor(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n      ).not.toHaveTextContent('Confirm password is required');\n    });\n  },\n}"
        }
      ],
      "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts": [
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<FormDirectiveDemoComponent>",
          "defaultValue": "{\n  title: 'simple form with validation options',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n}"
        },
        {
          "name": "ShouldShowFirstnameRequiredAfterDelayForNgModel",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.inputFirstName));\n    canvas.getByTestId(selectors.inputFirstName).blur();\n\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).not.toHaveTextContent('First name is required');\n\n    setTimeout(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperFirstName)\n      ).toHaveTextContent('First name is required');\n    }, 550)\n  },\n}"
        },
        {
          "name": "ShouldShowPasswordConfirmationAfterDelayForNgModelGroup",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'first');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'second'\n    , { delay: 500});\n    await userEvent.click(canvas.getByTestId(selectors.inputConfirmPassword));\n    await canvas.getByTestId(selectors.inputConfirmPassword).blur();\n\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).not.toHaveTextContent('Passwords do not match');\n\n    setTimeout(() => {\n      expect(\n        canvas.getByTestId(selectors.scControlWrapperPasswords)\n      ).toHaveTextContent('Passwords do not match');\n    }, 1000)\n  },\n}"
        },
        {
          "name": "ShouldValidateOnRootFormAfterDelay",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputFirstName),\n      'Brecht'\n    );\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputLastName),\n      'Billiet'\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '1234');\n\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify({}))\n\n    const expectedErrors = {\n      rootForm: ['Brecht his pass is not 1234'],\n    };\n\n    setTimeout(() => {\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    }, 550)\n  },\n}"
        }
      ],
      "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts": [
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta<FormDirectiveDemoComponent>",
          "defaultValue": "{\n  title: 'simple form',\n  component: FormDirectiveDemoComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  decorators: [componentWrapperDecorator(FormDirectiveDemoComponent)],\n}"
        },
        {
          "name": "ShouldHaveCorrectStatussesAndFormValueInitially",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'false'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'false'\n      );\n      const expectedContent = {\n        passwords: {\n          password: null,\n          confirmPassword: null,\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      const expectedErrors = {\n        firstName: ['First name is required'],\n        lastName: ['Last name is required'],\n        'passwords.password': ['Password is required'],\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    });\n  },\n}"
        },
        {
          "name": "ShouldHaveCorrectStatussesAndOnFormUpdate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputFirstName), 'f');\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'false'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'true'\n      );\n      const expectedContent = {\n        firstName: 'f',\n        passwords: {\n          password: null,\n          confirmPassword: null,\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      const expectedErrors = {\n        lastName: ['Last name is required'],\n        'passwords.password': ['Password is required'],\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedErrors));\n    });\n    await userEvent.type(canvas.getByTestId(selectors.inputLastName), 'l');\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'p');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'p'\n    );\n    await waitFor(() => {\n      expect(canvas.getByTestId(selectors.preFormValid)).toHaveTextContent(\n        'true'\n      );\n      expect(canvas.getByTestId(selectors.preFormDirty)).toHaveTextContent(\n        'true'\n      );\n      const expectedContent = {\n        firstName: 'f',\n        lastName: 'l',\n        passwords: {\n          password: 'p',\n          confirmPassword: 'p',\n        },\n      };\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormValue).innerHTML)\n        )\n      ).toEqual(JSON.stringify(expectedContent));\n      expect(\n        JSON.stringify(\n          JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n        )\n      ).toEqual(JSON.stringify({}));\n    });\n  },\n}"
        },
        {
          "name": "ShouldHideErrorsWhenValid",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n\n    await userEvent.type(canvas.getByTestId(selectors.inputFirstName), 'first');\n    await userEvent.type(canvas.getByTestId(selectors.inputLastName), 'last');\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'pass');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).not.toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).not.toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).not.toHaveTextContent('Password is required');\n  },\n}"
        },
        {
          "name": "ShouldShowErrorsOnBlur",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.inputFirstName));\n    canvas.getByTestId(selectors.inputFirstName).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n\n    await userEvent.click(canvas.getByTestId(selectors.inputLastName));\n    canvas.getByTestId(selectors.inputLastName).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n\n    await userEvent.click(canvas.getByTestId(selectors.inputPassword));\n    canvas.getByTestId(selectors.inputPassword).blur();\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n  },\n}"
        },
        {
          "name": "ShouldShowErrorsOnSubmit",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.click(canvas.getByTestId(selectors.btnSubmit));\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperFirstName)\n    ).toHaveTextContent('First name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperLastName)\n    ).toHaveTextContent('Last name is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPassword)\n    ).toHaveTextContent('Password is required');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperConfirmPassword)\n    ).not.toHaveTextContent('Confirm password is required');\n  },\n}"
        },
        {
          "name": "ShouldValidateOnGroups",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), 'first');\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputConfirmPassword),\n      'second'\n    );\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).toHaveTextContent('Passwords do not match');\n    await expect(\n      canvas.getByTestId(selectors.scControlWrapperPasswords)\n    ).toHaveClass('sc-control-wrapper--invalid');\n  },\n}"
        },
        {
          "name": "ShouldValidateOnRootForm",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StoryObj",
          "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputFirstName),\n      'Brecht'\n    );\n    await userEvent.type(\n      canvas.getByTestId(selectors.inputLastName),\n      'Billiet'\n    );\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '1234');\n    const expectedErrors = {\n      rootForm: ['Brecht his pass is not 1234'],\n    };\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify(expectedErrors));\n    await userEvent.type(canvas.getByTestId(selectors.inputPassword), '5');\n    await expect(\n      JSON.stringify(\n        JSON.parse(canvas.getByTestId(selectors.preFormErrors).innerHTML)\n      )\n    ).toEqual(JSON.stringify({}));\n  },\n}"
        }
      ],
      "projects/ngx-vest-forms/.storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ngx-vest-forms/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "projects/ngx-vest-forms/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormDirectiveDemoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldReactToDynamicValidationConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-config.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldRetriggerByValidationConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormDirectiveDemoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldShowFirstnameRequiredAfterDelayForNgModel",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldShowPasswordConfirmationAfterDelayForNgModelGroup",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form-with-validation-options.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldValidateOnRootFormAfterDelay",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "component",
        "linktype": "component",
        "name": "FormDirectiveDemoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldHaveCorrectStatussesAndFormValueInitially",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldHaveCorrectStatussesAndOnFormUpdate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldHideErrorsWhenValid",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldShowErrorsOnBlur",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldShowErrorsOnSubmit",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldValidateOnGroups",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ngx-vest-forms/src/lib/testing/simple-form.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ShouldValidateOnRootForm",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
